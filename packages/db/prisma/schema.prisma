// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    homes House[] @relation("members")
    chores Chore[]
    admins House[] @relation("Admin")
    username String? @unique
    invites Invite[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model House {
    id String @id @default(cuid())
    name String
    admin User @relation("Admin", fields:[adminId], references: [id])
    adminId String
    members User[] @relation("members")
    chores Chore[]
    invites Invite[]
}

model Chore {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    house House @relation(fields: [houseId], references: [id], onDelete: Cascade)
    houseId String
    title String
    description String @default("")
    due DateTime
    completed Boolean @default(false)
}

model Invite {
    id String @id @default(cuid())
    house House @relation(fields: [houseId], references: [id], onDelete: Cascade)
    houseId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    accepted Boolean @default(false)
    @@unique([houseId, userId])
}
